{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Network analysis in Python\n",
    "\n",
    "Finding a shortest path using a specific street network is a common GIS problem that has many practical\n",
    "applications. For example navigators are one of those \"every-day\" applications where **routing** using specific algorithms is used to find the optimal route between two (or multiple) points.\n",
    "\n",
    "It is also possible to perform network analysis such as tranposrtation routing in Python.\n",
    "[Networkx](https://networkx.github.io/documentation/stable/) is a Python module that provides tools for analyzing networks in various different ways. It also contains algorithms\n",
    "such as [Dijkstra's algorithm](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.algorithms.shortest_paths.weighted.single_source_dijkstra.html#networkx.algorithms.shortest_paths.weighted.single_source_dijkstra) or\n",
    "[A*](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.algorithms.shortest_paths.astar.astar_path.html#networkx.algorithms.shortest_paths.astar.astar_path) algoritm that are commonly used to find shortest paths along transportation network.\n",
    "\n",
    "To be able to conduct network analysis, it is, of course, necessary to have a network that is used for the analyses. [OSMnx](https://github.com/gboeing/osmnx) package that we just explored in previous tutorial, makes it really easy to retrieve routable networks from OpenStreetMap with different transport modes (walking, cycling and driving). Osmnx also combines some functionalities from `networkx` module to make it straightforward to conduct routing along OpenStreetMap data.\n",
    "\n",
    "Next we will test the routing functionalities of osmnx by finding a shortest path between two points based on drivable roads. When fetching netowrk data from OpenStreetMap using osmnx, it is possible to define the type of street network using the `network_type` parameter (options: `drive`, `walk` and `bike`).\n",
    "\n",
    "- import modules:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import osmnx as ox\n",
    "import networkx as nx\n",
    "import geopandas as gpd\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Download the OSM data from Kamppi but this time include only such street segments that are meant for cars by specifying `'drive'` into `network_type`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "place_name = \"Kamppi, Helsinki, Finland\"\n",
    "graph = ox.graph_from_place(place_name, network_type='drive')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Plot the graph:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 935.147x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = ox.plot_graph(graph)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okey so now we have retrieved only such streets where it is possible to drive with a car. Let's confirm\n",
    "this by taking a look at the attributes of the street network. Easiest way to do this is to convert the\n",
    "graph (nodes and edges) into GeoDataFrames.\n",
    "\n",
    "Converting graph into a GeoDataFrame can be done with function `graph_to_gdfs()` that we already used in previous tutorial. With parameters `nodes` and `edges`, it is possible to control whether to retrieve both nodes and edges from the graph. \n",
    "\n",
    "- Let's retreive the edges as a geodataframe:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Retrieve only edges from the graph\n",
    "edges = ox.graph_to_gdfs(graph, nodes=False, edges=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['u', 'v', 'key', 'osmid', 'oneway', 'lanes', 'name', 'highway',\n",
       "       'maxspeed', 'length', 'geometry', 'junction', 'bridge', 'access'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check columns\n",
    "edges.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check crs\n",
    "edges.crs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>u</th>\n",
       "      <th>v</th>\n",
       "      <th>key</th>\n",
       "      <th>osmid</th>\n",
       "      <th>oneway</th>\n",
       "      <th>lanes</th>\n",
       "      <th>name</th>\n",
       "      <th>highway</th>\n",
       "      <th>maxspeed</th>\n",
       "      <th>length</th>\n",
       "      <th>geometry</th>\n",
       "      <th>junction</th>\n",
       "      <th>bridge</th>\n",
       "      <th>access</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25216594</td>\n",
       "      <td>1372425714</td>\n",
       "      <td>0</td>\n",
       "      <td>23856784</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>Mechelininkatu</td>\n",
       "      <td>primary</td>\n",
       "      <td>40</td>\n",
       "      <td>40.885</td>\n",
       "      <td>LINESTRING (24.92106 60.16479, 24.92095 60.164...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>25238874</td>\n",
       "      <td>1372425713</td>\n",
       "      <td>0</td>\n",
       "      <td>[29977177, 30470347]</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "      <td>Mechelininkatu</td>\n",
       "      <td>primary</td>\n",
       "      <td>40</td>\n",
       "      <td>16.601</td>\n",
       "      <td>LINESTRING (24.92103 60.16366, 24.92104 60.163...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25238944</td>\n",
       "      <td>25216594</td>\n",
       "      <td>0</td>\n",
       "      <td>[372440330, 8135861]</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>primary</td>\n",
       "      <td>40</td>\n",
       "      <td>25.190</td>\n",
       "      <td>LINESTRING (24.92129 60.16463, 24.92127 60.164...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25238944</td>\n",
       "      <td>319896278</td>\n",
       "      <td>0</td>\n",
       "      <td>[25514547, 677423564, 30288797, 30288799]</td>\n",
       "      <td>True</td>\n",
       "      <td>[2, 3]</td>\n",
       "      <td>Mechelininkatu</td>\n",
       "      <td>primary</td>\n",
       "      <td>40</td>\n",
       "      <td>242.476</td>\n",
       "      <td>LINESTRING (24.92129 60.16463, 24.92136 60.164...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>25291537</td>\n",
       "      <td>25291591</td>\n",
       "      <td>0</td>\n",
       "      <td>[30568275, 36729015, 316590744, 316590745, 316...</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Fredrikinkatu</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>30</td>\n",
       "      <td>139.090</td>\n",
       "      <td>LINESTRING (24.93702 60.16433, 24.93700 60.164...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          u           v  key  \\\n",
       "0  25216594  1372425714    0   \n",
       "1  25238874  1372425713    0   \n",
       "2  25238944    25216594    0   \n",
       "3  25238944   319896278    0   \n",
       "4  25291537    25291591    0   \n",
       "\n",
       "                                               osmid  oneway   lanes  \\\n",
       "0                                           23856784    True       2   \n",
       "1                               [29977177, 30470347]    True       3   \n",
       "2                               [372440330, 8135861]    True       2   \n",
       "3          [25514547, 677423564, 30288797, 30288799]    True  [2, 3]   \n",
       "4  [30568275, 36729015, 316590744, 316590745, 316...    True     NaN   \n",
       "\n",
       "             name   highway maxspeed   length  \\\n",
       "0  Mechelininkatu   primary       40   40.885   \n",
       "1  Mechelininkatu   primary       40   16.601   \n",
       "2             NaN   primary       40   25.190   \n",
       "3  Mechelininkatu   primary       40  242.476   \n",
       "4   Fredrikinkatu  tertiary       30  139.090   \n",
       "\n",
       "                                            geometry junction bridge access  \n",
       "0  LINESTRING (24.92106 60.16479, 24.92095 60.164...      NaN    NaN    NaN  \n",
       "1  LINESTRING (24.92103 60.16366, 24.92104 60.163...      NaN    NaN    NaN  \n",
       "2  LINESTRING (24.92129 60.16463, 24.92127 60.164...      NaN    NaN    NaN  \n",
       "3  LINESTRING (24.92129 60.16463, 24.92136 60.164...      NaN    NaN    NaN  \n",
       "4  LINESTRING (24.93702 60.16433, 24.93700 60.164...      NaN    NaN    NaN  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "edges.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okey, so we have quite many columns in our GeoDataFrame. Most of the columns are fairly self-explanatory but the following table describes all of them. We can also see that the CRS of the GeoDataFrame seems to be WGS84 (i.e. epsg: 4326).\n",
    "Most of the attributes come directly from the OpenStreetMap, however, columns `u` and `v` are Networkx specific ids. You can click on the links to get more information about each attribute:\n",
    "\n",
    "\n",
    "| Column                                                     | Description                 | Data type         |\n",
    "|------------------------------------------------------------|-----------------------------|-------------------|\n",
    "| [bridge](http://wiki.openstreetmap.org/wiki/Key:bridge)    | Bridge feature              | boolean           |\n",
    "| geometry                                                   | Geometry of the feature     | Shapely.geometry  |\n",
    "| [highway](http://wiki.openstreetmap.org/wiki/Key:highway)  | Tag for roads (road type)   | str / list        |\n",
    "| [lanes](http://wiki.openstreetmap.org/wiki/Key:lanes)      | Number of lanes             | int (or nan)      |\n",
    "| [lenght](http://wiki.openstreetmap.org/wiki/Key:length)    | Length of feature (meters)  | float             |\n",
    "| [maxspeed](http://wiki.openstreetmap.org/wiki/Key:maxspeed)| maximum legal speed limit   | int /list         |\n",
    "| [name](http://wiki.openstreetmap.org/wiki/Key:name)        | Name of the (street) element| str (or nan)      |\n",
    "| [oneway](http://wiki.openstreetmap.org/wiki/Key:oneway)    | One way road                | boolean           |\n",
    "| [osmid](http://wiki.openstreetmap.org/wiki/Node)           | Unique ids for the element  | list              |\n",
    "| [u](http://ow.ly/bV8n30h7Ufm)                              | The first node of edge      | int               |\n",
    "| [v](http://ow.ly/bV8n30h7Ufm)                              | The last node of edge       | int               |\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Let's take a look what kind of features we have in the `highway` column:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "residential      112\n",
      "tertiary          78\n",
      "primary           26\n",
      "secondary         17\n",
      "unclassified      11\n",
      "living_street      4\n",
      "primary_link       1\n",
      "Name: highway, dtype: int64\n"
     ]
    }
   ],
   "source": [
    "print(edges['highway'].value_counts())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okey, now we can confirm that as a result our street network indeed only contains such streets where it is allowed to drive with a car as there are no e.g. cycleways or footways included in the data.\n",
    "\n",
    "Let's continue and find the shortest path between two points based on the distance. As the data is in WGS84 format, we should first reproject our data into a metric system.\n",
    "We can re-project the graph from latitudes and longitudes to an appropriate UTM zone using the [project_graph()](https://osmnx.readthedocs.io/en/stable/osmnx.html#osmnx.projection.project_graph) function from OSMnx. \n",
    "\n",
    "- Project the graph:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 473.235x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "graph_proj = ox.project_graph(graph)\n",
    "fig, ax = ox.plot_graph(graph_proj)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see a modest change in the appearance of the graph. But let's take a closer look by seeing how the data values look now:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get Edges and Nodes\n",
    "nodes_proj, edges_proj = ox.graph_to_gdfs(graph_proj, nodes=True, edges=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coordinate system: +proj=utm +zone=35 +ellps=WGS84 +datum=WGS84 +units=m +no_defs\n"
     ]
    }
   ],
   "source": [
    "print(\"Coordinate system:\", edges_proj.crs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>u</th>\n",
       "      <th>v</th>\n",
       "      <th>key</th>\n",
       "      <th>osmid</th>\n",
       "      <th>oneway</th>\n",
       "      <th>lanes</th>\n",
       "      <th>name</th>\n",
       "      <th>highway</th>\n",
       "      <th>maxspeed</th>\n",
       "      <th>length</th>\n",
       "      <th>geometry</th>\n",
       "      <th>junction</th>\n",
       "      <th>bridge</th>\n",
       "      <th>access</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25216594</td>\n",
       "      <td>1372425714</td>\n",
       "      <td>0</td>\n",
       "      <td>23856784</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>Mechelininkatu</td>\n",
       "      <td>primary</td>\n",
       "      <td>40</td>\n",
       "      <td>40.885</td>\n",
       "      <td>LINESTRING (384631.322 6671580.071, 384624.750...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>25238874</td>\n",
       "      <td>1372425713</td>\n",
       "      <td>0</td>\n",
       "      <td>[29977177, 30470347]</td>\n",
       "      <td>True</td>\n",
       "      <td>3</td>\n",
       "      <td>Mechelininkatu</td>\n",
       "      <td>primary</td>\n",
       "      <td>40</td>\n",
       "      <td>16.601</td>\n",
       "      <td>LINESTRING (384625.787 6671454.380, 384626.281...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25238944</td>\n",
       "      <td>25216594</td>\n",
       "      <td>0</td>\n",
       "      <td>[372440330, 8135861]</td>\n",
       "      <td>True</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>primary</td>\n",
       "      <td>40</td>\n",
       "      <td>25.190</td>\n",
       "      <td>LINESTRING (384643.473 6671561.534, 384643.045...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>25238944</td>\n",
       "      <td>319896278</td>\n",
       "      <td>0</td>\n",
       "      <td>[25514547, 677423564, 30288797, 30288799]</td>\n",
       "      <td>True</td>\n",
       "      <td>[2, 3]</td>\n",
       "      <td>Mechelininkatu</td>\n",
       "      <td>primary</td>\n",
       "      <td>40</td>\n",
       "      <td>242.476</td>\n",
       "      <td>LINESTRING (384643.473 6671561.534, 384648.006...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>25291537</td>\n",
       "      <td>25291591</td>\n",
       "      <td>0</td>\n",
       "      <td>[30568275, 36729015, 316590744, 316590745, 316...</td>\n",
       "      <td>True</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Fredrikinkatu</td>\n",
       "      <td>tertiary</td>\n",
       "      <td>30</td>\n",
       "      <td>139.090</td>\n",
       "      <td>LINESTRING (385515.553 6671500.134, 385514.557...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          u           v  key  \\\n",
       "0  25216594  1372425714    0   \n",
       "1  25238874  1372425713    0   \n",
       "2  25238944    25216594    0   \n",
       "3  25238944   319896278    0   \n",
       "4  25291537    25291591    0   \n",
       "\n",
       "                                               osmid  oneway   lanes  \\\n",
       "0                                           23856784    True       2   \n",
       "1                               [29977177, 30470347]    True       3   \n",
       "2                               [372440330, 8135861]    True       2   \n",
       "3          [25514547, 677423564, 30288797, 30288799]    True  [2, 3]   \n",
       "4  [30568275, 36729015, 316590744, 316590745, 316...    True     NaN   \n",
       "\n",
       "             name   highway maxspeed   length  \\\n",
       "0  Mechelininkatu   primary       40   40.885   \n",
       "1  Mechelininkatu   primary       40   16.601   \n",
       "2             NaN   primary       40   25.190   \n",
       "3  Mechelininkatu   primary       40  242.476   \n",
       "4   Fredrikinkatu  tertiary       30  139.090   \n",
       "\n",
       "                                            geometry junction bridge access  \n",
       "0  LINESTRING (384631.322 6671580.071, 384624.750...      NaN    NaN    NaN  \n",
       "1  LINESTRING (384625.787 6671454.380, 384626.281...      NaN    NaN    NaN  \n",
       "2  LINESTRING (384643.473 6671561.534, 384643.045...      NaN    NaN    NaN  \n",
       "3  LINESTRING (384643.473 6671561.534, 384648.006...      NaN    NaN    NaN  \n",
       "4  LINESTRING (385515.553 6671500.134, 385514.557...      NaN    NaN    NaN  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "edges_proj.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okey, as we can see from the CRS the data is now in [UTM projection](https://en.wikipedia.org/wiki/Universal_Transverse_Mercator_coordinate_system) using zone 35 which is the one used for Finland, and indeed the orientation of the map and the geometry values also confirm this.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Furthermore, we can check the epsg code of this projection using pyproj:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "32635"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pyproj import CRS\n",
    "CRS(edges_proj.crs).to_epsg()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Indeed, the projection is now [WGS 84 / UTM zone 35N, EPSG:32635](https://epsg.io/32635)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analyzing the network properties\n",
    "\n",
    "Now as we have seen some of the basic functionalities of osmnx such as downloading the data and converting data from graph to GeoDataFrame, we can take a look some of the analytical features of omsnx. Osmnx includes many useful functionalities to extract information about the network.\n",
    "\n",
    "- To calculate some of the basic street network measures we can use `basic_stats()` function in OSMnx:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'n': 124,\n",
       " 'm': 249,\n",
       " 'k_avg': 4.016129032258065,\n",
       " 'intersection_count': 116,\n",
       " 'streets_per_node_avg': 3.217741935483871,\n",
       " 'streets_per_node_counts': {0: 0, 1: 8, 2: 1, 3: 71, 4: 44},\n",
       " 'streets_per_node_proportion': {0: 0.0,\n",
       "  1: 0.06451612903225806,\n",
       "  2: 0.008064516129032258,\n",
       "  3: 0.5725806451612904,\n",
       "  4: 0.3548387096774194},\n",
       " 'edge_length_total': 19967.856000000003,\n",
       " 'edge_length_avg': 80.19219277108435,\n",
       " 'street_length_total': 13659.232000000002,\n",
       " 'street_length_avg': 74.64061202185793,\n",
       " 'street_segments_count': 183,\n",
       " 'node_density_km': None,\n",
       " 'intersection_density_km': None,\n",
       " 'edge_density_km': None,\n",
       " 'street_density_km': None,\n",
       " 'circuity_avg': 1.2708222054226743e-05,\n",
       " 'self_loop_proportion': 0.0,\n",
       " 'clean_intersection_count': None,\n",
       " 'clean_intersection_density_km': None}"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate network statistics\n",
    "stats = ox.basic_stats(graph_proj)\n",
    "stats"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To be able to extract the more advanced statistics (and some of the missing ones above) from the street network, it is required to have information about the coverage area of the network. Let's calculate the area of the [convex hull](https://en.wikipedia.org/wiki/Convex_hull) of the street network and see what we can get.\n",
    "As certain statistics are produced separately for each node, they produce a lot of output. Let's merge both stats and put them into Pandas Series to keep things in more compact form.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" height=\"300\" viewBox=\"384574.12422161805 6671093.468717448 1330.1714883511304 1222.853895086795\" preserveAspectRatio=\"xMinYMin meet\"><g transform=\"matrix(1,0,0,-1,0,13343409.791329984)\"><path fill-rule=\"evenodd\" fill=\"#66cc99\" stroke=\"#555555\" stroke-width=\"8.86780992234087\" opacity=\"0.6\" d=\"M 384887.43520964065,6671142.734328128 L 384874.6134171016,6671144.953666562 L 384862.49321464007,6671149.703062389 L 384846.70817595173,6671156.250464548 L 384830.55097262113,6671163.678893964 L 384819.2577072033,6671169.817780623 L 384810.548805537,6671175.830884326 L 384799.8097661783,6671185.46288525 L 384787.5960553605,6671198.183697623 L 384743.85316015256,6671245.752737156 L 384735.2918974575,6671256.09654915 L 384727.4991241174,6671267.3857674645 L 384659.8583754331,6671369.992065999 L 384633.0996793158,6671411.455786523 L 384630.248874986,6671418.811690406 L 384628.1016578999,6671429.109849386 L 384627.1870488745,6671437.808982659 L 384624.5128871406,6671468.763145481 L 384623.92622339417,6671484.172020655 L 384623.38983229775,6671505.586139437 L 384624.16995266604,6671547.642789744 L 384629.5989824361,6671781.058284743 L 384629.84665722464,6671787.335923339 L 384630.97953189426,6671796.505516778 L 384633.39436108875,6671805.824194773 L 384997.3250063297,6672083.911938155 L 385005.4581702336,6672089.161916895 L 385285.23408373387,6672267.057001855 L 385431.07297831087,6672263.37285732 L 385453.99608750106,6672262.733936 L 385460.97191941144,6672262.437781863 L 385855.0300992895,6671721.810323974 L 385395.64087329013,6671421.571126892 L 385372.5008918552,6671406.570391574 L 384912.88220936153,6671147.774655974 L 384904.2688298981,6671144.4567097 L 384896.0935586088,6671142.885828212 L 384887.43520964065,6671142.734328128 z\" /></g></svg>"
      ],
      "text/plain": [
       "<shapely.geometry.polygon.Polygon at 0x270467ad4e0>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get the Convex Hull of the network\n",
    "convex_hull = edges_proj.unary_union.convex_hull\n",
    "# Show output\n",
    "convex_hull"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can use the Convex Hull above to calculate e.g. denisity statistics:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "n                                                                                    124\n",
       "m                                                                                    249\n",
       "k_avg                                                                            4.01613\n",
       "intersection_count                                                                   116\n",
       "streets_per_node_avg                                                             3.21774\n",
       "streets_per_node_counts                                 {0: 0, 1: 8, 2: 1, 3: 71, 4: 44}\n",
       "streets_per_node_proportion            {0: 0.0, 1: 0.06451612903225806, 2: 0.00806451...\n",
       "edge_length_total                                                                19967.9\n",
       "edge_length_avg                                                                  80.1922\n",
       "street_length_total                                                              13659.2\n",
       "street_length_avg                                                                74.6406\n",
       "street_segments_count                                                                183\n",
       "node_density_km                                                                  148.885\n",
       "intersection_density_km                                                           139.28\n",
       "edge_density_km                                                                  23975.2\n",
       "street_density_km                                                                16400.5\n",
       "circuity_avg                                                                 1.27082e-05\n",
       "self_loop_proportion                                                                   0\n",
       "clean_intersection_count                                                            None\n",
       "clean_intersection_density_km                                                       None\n",
       "avg_neighbor_degree                    {25216594: 2.0, 25238874: 2.0, 25238944: 1.0, ...\n",
       "avg_neighbor_degree_avg                                                          2.14315\n",
       "avg_weighted_neighbor_degree           {25216594: 0.04891769597651951, 25238874: 0.12...\n",
       "avg_weighted_neighbor_degree_avg                                               0.0838789\n",
       "degree_centrality                      {25216594: 0.024390243902439025, 25238874: 0.0...\n",
       "degree_centrality_avg                                                          0.0326515\n",
       "clustering_coefficient                 {25216594: 0, 25238874: 0, 25238944: 0, 252915...\n",
       "clustering_coefficient_avg                                                     0.0954301\n",
       "clustering_coefficient_weighted        {25216594: 0, 25238874: 0, 25238944: 0, 252915...\n",
       "clustering_coefficient_weighted_avg                                            0.0165222\n",
       "pagerank                               {25216594: 0.008697876082389044, 25238874: 0.0...\n",
       "pagerank_max_node                                                               25416262\n",
       "pagerank_max                                                                   0.0239018\n",
       "pagerank_min_node                                                             1008183915\n",
       "pagerank_min                                                                  0.00143337\n",
       "eccentricity                           {3216400385: 1657.5310000000004, 1372233731: 1...\n",
       "diameter                                                                         2153.57\n",
       "radius                                                                           1007.06\n",
       "center                                                                      [1372376937]\n",
       "periphery                                                                    [319896278]\n",
       "closeness_centrality                   {25216594: 0.0009352922781262002, 25238874: 0....\n",
       "closeness_centrality_avg                                                      0.00143723\n",
       "dtype: object"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate the area\n",
    "area = convex_hull.area\n",
    "\n",
    "# Calculate statistics with density information\n",
    "stats = ox.basic_stats(graph_proj, area=area)\n",
    "extended_stats = ox.extended_stats(graph_proj, ecc=True, cc=True)\n",
    "for key, value in extended_stats.items():\n",
    "    stats[key] = value\n",
    "pd.Series(stats)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, now we have a **LOT** of information about our street network that can be used to understand its structure. We can for example see that the average node density in our network is `149 nodes/km` and that the total edge length of our network is `19960.6 meters`.\n",
    "\n",
    "Furthermore, we can see that the [degree centrality](https://en.wikipedia.org/wiki/Centrality) of our network is on average `0.0326515`. Degree is a simple centrality measure that counts how many neighbors a node has (here a fraction of nodes it is connected to). Another interesting measure is the [PageRank](https://en.wikipedia.org/wiki/PageRank) that measures the importance of specific node in the graph. Here we can see that the most important node in our graph seem to a node with osmid `25416262`. PageRank was the algorithm that Google first developed (Larry Page & Sergei Brin) to order the search engine results and became famous for.\n",
    "\n",
    "You can read the [Wikipedia article about different centrality measures](https://en.wikipedia.org/wiki/Centrality) if you are interested what the other centrality measures mean."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Shortest path analysis\n",
    "\n",
    "Let's now calculate the shortest path between two points. First we need to specify the source and target locations for our route. Let's use the centroid of our network as the source location and the furthest point in East in our network as the target location.\n",
    "\n",
    "- Let's first determine the centroid of our network. We can take advantage of the same `Convex Hull` that we used previously to determine the centroid of our data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "POINT (385170.0891607622 6671717.293203074)\n"
     ]
    }
   ],
   "source": [
    "# Get the Convex Hull of the network\n",
    "convex_hull = edges_proj.unary_union.convex_hull\n",
    "\n",
    "# Centroid\n",
    "centroid = convex_hull.centroid\n",
    "\n",
    "# Show\n",
    "print(centroid)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, now we have a centroid of our network determined. We will use this later as an origin point in our routing operation. \n",
    "\n",
    "- Let's now find the easternmost node in our street network. We can do this based on the x coordinates of the nodes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "      <th>x</th>\n",
       "      <th>osmid</th>\n",
       "      <th>highway</th>\n",
       "      <th>lon</th>\n",
       "      <th>lat</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>25216594</th>\n",
       "      <td>6.671580e+06</td>\n",
       "      <td>384631.322372</td>\n",
       "      <td>25216594</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.921057</td>\n",
       "      <td>60.164794</td>\n",
       "      <td>POINT (384631.322 6671580.071)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25238874</th>\n",
       "      <td>6.671454e+06</td>\n",
       "      <td>384625.787221</td>\n",
       "      <td>25238874</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.921028</td>\n",
       "      <td>60.163665</td>\n",
       "      <td>POINT (384625.787 6671454.380)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25238944</th>\n",
       "      <td>6.671562e+06</td>\n",
       "      <td>384643.473274</td>\n",
       "      <td>25238944</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.921286</td>\n",
       "      <td>60.164631</td>\n",
       "      <td>POINT (384643.473 6671561.534)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25291537</th>\n",
       "      <td>6.671500e+06</td>\n",
       "      <td>385515.553244</td>\n",
       "      <td>25291537</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.937023</td>\n",
       "      <td>60.164325</td>\n",
       "      <td>POINT (385515.553 6671500.134)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25291564</th>\n",
       "      <td>6.671673e+06</td>\n",
       "      <td>385779.207015</td>\n",
       "      <td>25291564</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.941674</td>\n",
       "      <td>60.165948</td>\n",
       "      <td>POINT (385779.207 6671672.709)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     y              x     osmid highway        lon        lat  \\\n",
       "25216594  6.671580e+06  384631.322372  25216594     NaN  24.921057  60.164794   \n",
       "25238874  6.671454e+06  384625.787221  25238874     NaN  24.921028  60.163665   \n",
       "25238944  6.671562e+06  384643.473274  25238944     NaN  24.921286  60.164631   \n",
       "25291537  6.671500e+06  385515.553244  25291537     NaN  24.937023  60.164325   \n",
       "25291564  6.671673e+06  385779.207015  25291564     NaN  24.941674  60.165948   \n",
       "\n",
       "                                geometry  \n",
       "25216594  POINT (384631.322 6671580.071)  \n",
       "25238874  POINT (384625.787 6671454.380)  \n",
       "25238944  POINT (384643.473 6671561.534)  \n",
       "25291537  POINT (385515.553 6671500.134)  \n",
       "25291564  POINT (385779.207 6671672.709)  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nodes_proj.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Let's find out which node has the largest x-coordinate value. First, let's ensure that the values are floats:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the x coordinates of the nodes\n",
    "nodes_proj['x'] = nodes_proj[\"x\"].astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "385855.0300992895\n"
     ]
    }
   ],
   "source": [
    "# Retrieve the maximum x value (i.e. the most eastern)\n",
    "maxx = nodes_proj['x'].max()\n",
    "print(maxx)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Let's retrieve the target Point having the largest x-coordinate. We can do this by using the `.loc` function of Pandas that we have used already many times in earlier tutorials."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "POINT (385855.0300992895 6671721.810323974)\n"
     ]
    }
   ],
   "source": [
    "# Retrieve the node that is the most eastern one and get the Shapely Point geometry out of it\n",
    "target = nodes_proj.loc[nodes_proj['x']==maxx, 'geometry'].values[0]\n",
    "print(target)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okey now we can see that as a result we have a Shapely Point that we can use as a target point in our routing.\n",
    "\n",
    "Let's now find the nearest graph nodes (and their node IDs) to these points using OSMnx [get_nearest_node](https://osmnx.readthedocs.io/en/stable/osmnx.html#osmnx.utils.get_nearest_node). According to the documentation of this function, we need to parse Point coordinates as coordinate-tuples in this order: `latitude, longitude`(or `y, x`). As our data is now projected to UTM projection, we need to specify with `method` parameter that the function uses `'euclidean'` distances to calculate the distance from the point to the closest node (with decimal derees, use `'haversine'`, which determines the great-circle distances). The method parameter is important if you want to know the actual distance between the Point and the closest node which you can retrieve by specifying parameter `return_dist=True`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get origin x and y coordinates\n",
    "orig_xy = (centroid.y, centroid.x)\n",
    "\n",
    "# Get target x and y coordinates\n",
    "target_xy = (target.y, target.x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "301360197"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Find the closest origin and target nodes from the graph (the ids of them)\n",
    "orig_node = ox.get_nearest_node(graph_proj, orig_xy, method='euclidean')\n",
    "orig_node"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "317703609"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "target_node = ox.get_nearest_node(graph_proj, target_xy, method='euclidean')\n",
    "target_node"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have the IDs for the closest nodes that were found from the graph to the origin and target points that we specified. \n",
    "\n",
    "- Let's retrieve the node information from the `nodes_proj` GeoDataFrame by passing the ids to the `loc` indexer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Retrieve the rows from the nodes GeoDataFrame\n",
    "o_closest = nodes_proj.loc[orig_node]\n",
    "t_closest = nodes_proj.loc[target_node]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Let's also create a GeoDataFrame that contains these points"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "      <th>x</th>\n",
       "      <th>osmid</th>\n",
       "      <th>highway</th>\n",
       "      <th>lon</th>\n",
       "      <th>lat</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>301360197</th>\n",
       "      <td>6.671721e+06</td>\n",
       "      <td>385166.707932</td>\n",
       "      <td>301360197</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.930617</td>\n",
       "      <td>60.166212</td>\n",
       "      <td>POINT (385166.708 6671721.244)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>317703609</th>\n",
       "      <td>6.671722e+06</td>\n",
       "      <td>385855.030099</td>\n",
       "      <td>317703609</td>\n",
       "      <td>traffic_signals</td>\n",
       "      <td>24.943012</td>\n",
       "      <td>60.166410</td>\n",
       "      <td>POINT (385855.030 6671721.810)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                      y              x      osmid          highway        lon  \\\n",
       "301360197  6.671721e+06  385166.707932  301360197              NaN  24.930617   \n",
       "317703609  6.671722e+06  385855.030099  317703609  traffic_signals  24.943012   \n",
       "\n",
       "                 lat                        geometry  \n",
       "301360197  60.166212  POINT (385166.708 6671721.244)  \n",
       "317703609  60.166410  POINT (385855.030 6671721.810)  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a GeoDataFrame from the origin and target points\n",
    "od_nodes = gpd.GeoDataFrame([o_closest, t_closest], geometry='geometry', crs=nodes_proj.crs)\n",
    "od_nodes.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Okay, as a result we got now the closest node IDs of our origin and target locations. As you can see, the `index` in this GeoDataFrame corresponds to the IDs that we found with `get_nearest_node()` function."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Now we are ready to do the routing and find the shortest path between the origin and target locations\n",
    "by using the `shortest_path()` [function](https://networkx.github.io/documentation/networkx-1.10/reference/generated/networkx.algorithms.shortest_paths.generic.shortest_path.html) of networkx.\n",
    "With `weight` -parameter we can specify that `'length'` attribute should be used as the cost impedance in the routing. If specifying the weight parameter, NetworkX will use by default Dijkstra's algorithm to find the optimal route. We need to specify the graph that is used for routing, and the origin `ID` (*source*) and the target `ID` in between the shortest path will be calculated:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[301360197, 1372441183, 1372441170, 60170471, 1377211668, 1377211666, 25291565, 25291564, 317703609]\n"
     ]
    }
   ],
   "source": [
    "# Calculate the shortest path\n",
    "route = nx.shortest_path(G=graph_proj, source=orig_node, target=target_node, weight='length')\n",
    "\n",
    "# Show what we have\n",
    "print(route)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As a result we get a list of all the nodes that are along the shortest path. \n",
    "\n",
    "- We could extract the locations of those nodes from the `nodes_proj` GeoDataFrame and create a LineString presentation of the points, but luckily, OSMnx can do that for us and we can plot shortest path by using `plot_graph_route()` function:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 473.235x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the shortest path\n",
    "fig, ax = ox.plot_graph_route(graph_proj, route, origin_point=orig_xy, destination_point=target_xy)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nice! Now we have the shortest path between our origin and target locations.\n",
    "Being able to analyze shortest paths between locations can be valuable information for many applications.\n",
    "Here, we only analyzed the shortest paths based on distance but quite often it is more useful to find the\n",
    "optimal routes between locations based on the travelled time. Here, for example we could calculate the time that it takes to cross each road segment by dividing the length of the road segment with the speed limit and calculate the optimal routes by taking into account the speed limits as well that might alter the result especially on longer trips than here."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Saving shortest paths to disk\n",
    "\n",
    "Quite often you need to save the route e.g. as a Shapefile.\n",
    "Hence, let's continue still a bit and see how we can make a Shapefile of our route with some information associated with it.\n",
    "\n",
    "- First we need to get the nodes that belong to the shortest path:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>y</th>\n",
       "      <th>x</th>\n",
       "      <th>osmid</th>\n",
       "      <th>highway</th>\n",
       "      <th>lon</th>\n",
       "      <th>lat</th>\n",
       "      <th>geometry</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>301360197</th>\n",
       "      <td>6.671721e+06</td>\n",
       "      <td>385166.707932</td>\n",
       "      <td>301360197</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.930617</td>\n",
       "      <td>60.166212</td>\n",
       "      <td>POINT (385166.708 6671721.244)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1372441183</th>\n",
       "      <td>6.671672e+06</td>\n",
       "      <td>385199.040423</td>\n",
       "      <td>1372441183</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.931227</td>\n",
       "      <td>60.165777</td>\n",
       "      <td>POINT (385199.040 6671671.820)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1372441170</th>\n",
       "      <td>6.671610e+06</td>\n",
       "      <td>385239.956998</td>\n",
       "      <td>1372441170</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.931999</td>\n",
       "      <td>60.165235</td>\n",
       "      <td>POINT (385239.957 6671610.080)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60170471</th>\n",
       "      <td>6.671704e+06</td>\n",
       "      <td>385382.616738</td>\n",
       "      <td>60170471</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.934515</td>\n",
       "      <td>60.166117</td>\n",
       "      <td>POINT (385382.617 6671703.996)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1377211668</th>\n",
       "      <td>6.671789e+06</td>\n",
       "      <td>385514.573340</td>\n",
       "      <td>1377211668</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.936843</td>\n",
       "      <td>60.166917</td>\n",
       "      <td>POINT (385514.573 6671789.024)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1377211666</th>\n",
       "      <td>6.671703e+06</td>\n",
       "      <td>385570.886277</td>\n",
       "      <td>1377211666</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.937906</td>\n",
       "      <td>60.166160</td>\n",
       "      <td>POINT (385570.886 6671702.892)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25291565</th>\n",
       "      <td>6.671586e+06</td>\n",
       "      <td>385647.124210</td>\n",
       "      <td>25291565</td>\n",
       "      <td>traffic_signals</td>\n",
       "      <td>24.939344</td>\n",
       "      <td>60.165135</td>\n",
       "      <td>POINT (385647.124 6671586.216)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25291564</th>\n",
       "      <td>6.671673e+06</td>\n",
       "      <td>385779.207015</td>\n",
       "      <td>25291564</td>\n",
       "      <td>NaN</td>\n",
       "      <td>24.941674</td>\n",
       "      <td>60.165948</td>\n",
       "      <td>POINT (385779.207 6671672.709)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>317703609</th>\n",
       "      <td>6.671722e+06</td>\n",
       "      <td>385855.030099</td>\n",
       "      <td>317703609</td>\n",
       "      <td>traffic_signals</td>\n",
       "      <td>24.943012</td>\n",
       "      <td>60.166410</td>\n",
       "      <td>POINT (385855.030 6671721.810)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                       y              x       osmid          highway  \\\n",
       "301360197   6.671721e+06  385166.707932   301360197              NaN   \n",
       "1372441183  6.671672e+06  385199.040423  1372441183              NaN   \n",
       "1372441170  6.671610e+06  385239.956998  1372441170              NaN   \n",
       "60170471    6.671704e+06  385382.616738    60170471              NaN   \n",
       "1377211668  6.671789e+06  385514.573340  1377211668              NaN   \n",
       "1377211666  6.671703e+06  385570.886277  1377211666              NaN   \n",
       "25291565    6.671586e+06  385647.124210    25291565  traffic_signals   \n",
       "25291564    6.671673e+06  385779.207015    25291564              NaN   \n",
       "317703609   6.671722e+06  385855.030099   317703609  traffic_signals   \n",
       "\n",
       "                  lon        lat                        geometry  \n",
       "301360197   24.930617  60.166212  POINT (385166.708 6671721.244)  \n",
       "1372441183  24.931227  60.165777  POINT (385199.040 6671671.820)  \n",
       "1372441170  24.931999  60.165235  POINT (385239.957 6671610.080)  \n",
       "60170471    24.934515  60.166117  POINT (385382.617 6671703.996)  \n",
       "1377211668  24.936843  60.166917  POINT (385514.573 6671789.024)  \n",
       "1377211666  24.937906  60.166160  POINT (385570.886 6671702.892)  \n",
       "25291565    24.939344  60.165135  POINT (385647.124 6671586.216)  \n",
       "25291564    24.941674  60.165948  POINT (385779.207 6671672.709)  \n",
       "317703609   24.943012  60.166410  POINT (385855.030 6671721.810)  "
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Get the nodes along the shortest path\n",
    "route_nodes = nodes_proj.loc[route]\n",
    "route_nodes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see, now we have all the nodes that were part of the shortest path as a GeoDataFrame.\n",
    "\n",
    "- Now we can create a LineString out of the Point geometries of the nodes:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"300\" height=\"257.87444090284407\" viewBox=\"385139.17504486965 6671558.6828059275 743.3879411282833 257.87444090284407\" preserveAspectRatio=\"xMinYMin meet\"><g transform=\"matrix(1,0,0,-1,0,13343375.240052758)\"><polyline fill=\"none\" stroke=\"#66cc99\" stroke-width=\"4.9559196075218885\" points=\"385166.7079315781,6671721.244047897 385199.0404225526,6671671.819812791 385239.95699829527,6671610.0800060425 385382.61673782277,6671703.996054846 385514.5733395504,6671789.024360122 385570.8862774068,6671702.891685122 385647.12420955085,6671586.215692636 385779.2070153267,6671672.709376794 385855.0300992895,6671721.810323974\" opacity=\"0.8\" /></g></svg>"
      ],
      "text/plain": [
       "<shapely.geometry.linestring.LineString at 0x270467f16a0>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from shapely.geometry import LineString, Point\n",
    "\n",
    "# Create a geometry for the shortest path\n",
    "route_line = LineString(list(route_nodes.geometry.values))\n",
    "route_line"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have the route as a LineString geometry. \n",
    "\n",
    "- Let's make a GeoDataFrame out of it having some useful information about our route such as a list of the osmids that are part of the route and the length of the route."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>geometry</th>\n",
       "      <th>osmids</th>\n",
       "      <th>length_m</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LINESTRING (385166.708 6671721.244, 385199.040...</td>\n",
       "      <td>[301360197, 1372441183, 1372441170, 60170471, ...</td>\n",
       "      <td>951.40388</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            geometry  \\\n",
       "0  LINESTRING (385166.708 6671721.244, 385199.040...   \n",
       "\n",
       "                                              osmids   length_m  \n",
       "0  [301360197, 1372441183, 1372441170, 60170471, ...  951.40388  "
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a GeoDataFrame\n",
    "route_geom = gpd.GeoDataFrame([[route_line]], geometry='geometry', crs=edges_proj.crs, columns=['geometry'])\n",
    "\n",
    "# Add a list of osmids associated with the route\n",
    "route_geom.loc[0, 'osmids'] = str(list(route_nodes['osmid'].values))\n",
    "\n",
    "# Calculate the route length\n",
    "route_geom['length_m'] = route_geom.length\n",
    "\n",
    "route_geom.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we have a GeoDataFrame that we can save to disk. Let's still confirm that everything is ok by plotting our route on top of our street network and some buildings, and plot also the origin and target points on top of our map.\n",
    "\n",
    "- Get buildings:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Retrieve buildings and reproject\n",
    "buildings = ox.footprints_from_place(place_name)\n",
    "buildings_proj = buildings.to_crs(crs=edges_proj.crs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Let's now plot the route and the street network elements to verify that everything is as it should:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot edges and nodes\n",
    "ax = edges_proj.plot(linewidth=0.75, color='gray')\n",
    "ax = nodes_proj.plot(ax=ax, markersize=2, color='gray')\n",
    "\n",
    "# Add buildings\n",
    "ax = buildings_proj.plot(ax=ax, facecolor='khaki', alpha=0.7)\n",
    "\n",
    "# Add the route\n",
    "ax = route_geom.plot(ax=ax, linewidth=2, linestyle='--', color='red')\n",
    "\n",
    "# Add the origin and destination nodes of the route\n",
    "ax = od_nodes.plot(ax=ax, markersize=24, color='green')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great everything seems to be in order! As you can see, now we have a full control of all the elements of our map and we can use all the aesthetic properties that matplotlib provides to modify how our map will look like. Now we are almost ready to save our data into disk.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- As there are certain columns with such data values that Shapefile format does not support (such as `list` or `boolean`), we need to convert those into strings to be able to export the data to Shapefile:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "u              int64\n",
      "v              int64\n",
      "key            int64\n",
      "osmid         object\n",
      "oneway        object\n",
      "lanes         object\n",
      "name          object\n",
      "highway       object\n",
      "maxspeed      object\n",
      "length       float64\n",
      "geometry    geometry\n",
      "junction      object\n",
      "bridge        object\n",
      "access        object\n",
      "dtype: object\n"
     ]
    }
   ],
   "source": [
    "# Columns with invalid values\n",
    "invalid_cols = ['lanes', 'maxspeed', 'name', 'oneway', 'osmid']\n",
    "\n",
    "# Iterate over invalid columns and convert them to string format\n",
    "for col in invalid_cols:\n",
    "    edges_proj[col] = edges_proj[col].astype(str)\n",
    "    \n",
    "print(edges_proj.dtypes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we can see that most of the attributes are of type `object` that quite often (such as ours here) refers to a string type of data.\n",
    "\n",
    "- Now we are finally ready to parse the output filepaths and save the data into disk:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "# Parse the place name for the output file names (replace spaces with underscores and remove commas)\n",
    "place_name_out = place_name.replace(' ', '_').replace(',','')\n",
    "\n",
    "# Output directory\n",
    "out_dir = \"data\"\n",
    "\n",
    "# Parse output file paths\n",
    "streets_out = os.path.join(out_dir, \"%s_streets.shp\" % place_name_out)\n",
    "route_out = os.path.join(out_dir, \"Route_from_a_to_b_at_%s.shp\" % place_name_out)\n",
    "nodes_out = os.path.join(out_dir, \"%s_nodes.shp\" % place_name_out)\n",
    "buildings_out = os.path.join(out_dir, \"%s_buildings.shp\" % place_name_out)\n",
    "od_out = os.path.join(out_dir, \"%s_route_OD_points.shp\" % place_name_out)\n",
    "\n",
    "# Save files\n",
    "edges_proj.to_file(streets_out)\n",
    "route_geom.to_file(route_out)\n",
    "nodes_proj.to_file(nodes_out)\n",
    "od_nodes.to_file(od_out)\n",
    "buildings[['geometry', 'name', 'addr:street']].to_file(buildings_out)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great, now we have saved all the data that was used to produce the maps as Shapefiles."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
